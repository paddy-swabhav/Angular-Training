package com.aurionpro.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aurionpro.entity.Student;
import com.aurionpro.exception.StudentErrorResponse;
import com.aurionpro.exception.StudentNotFoundException;
import com.aurionpro.service.StudentService;

@RestController
@RequestMapping("/studentapp")
public class StudentController {

	private StudentService service;

	@Autowired
	public StudentController(StudentService service) {
		this.service = service;
	}

	@GetMapping("/students")
	public List<Student> getAllStudents() {
		return service.findAll();
	}
	
	@GetMapping("/students/{studentId}")
	public Student getStudentById(@PathVariable int studentId) {
		Student student=null;
		try {
			student =  service.findById(studentId);
		} catch (StudentNotFoundException e) {
			e.printStackTrace();
		}
		return student;
	}
	
	@PostMapping("/students")
	public Student addNewStudent(@RequestBody Student student) {
		return service.saveOrUpdate(student);
	}
	
	@PutMapping("/students")
	public Student updateStudent(@RequestBody Student student) {
		return service.saveOrUpdate(student);
	}
	
	@DeleteMapping("/students/{studentId}")
	public void deleteStudent(@PathVariable int studentId) {
		service.deleteById(studentId);
	}

	@ExceptionHandler
	public ResponseEntity<StudentErrorResponse> handleException1(StudentNotFoundException exc) {

		StudentErrorResponse error = new StudentErrorResponse();

		error.setStatus(HttpStatus.NOT_FOUND.value());
		error.setMessage(exc.getMessage());
		error.setTimeStamp(System.currentTimeMillis());

		// return ResponseEntity

		return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
	}
	
}
